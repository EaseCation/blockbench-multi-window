(()=>{"use strict";const e=new Action("open_in_new_window",{icon:"backup_table",category:"file",name:tl("action.open_in_new_window"),description:tl("action.open_in_new_window.desc"),condition:()=>isApp&&!!Project,click:function(){if(!Project)return;let e=Codecs.project.compile({editor_state:!0,history:!1,uuids:!0,bitmaps:!0,raw:!0});Project.isSharing=!0,ipcRenderer.send("new-window",JSON.stringify(e))}});function n(e,n){isApp?(n.__magic__=e,ipcRenderer.send("dragging-tab",JSON.stringify(n))):console.warn("[SharedProject] 发送数据失败，当前不是应用程序环境")}const i={};function o(e,n){i[e]=n}const t=["add_cube","add_mesh","add_group","add_texture_mesh","update_keyframe","group_elements","finish_edit","undo","redo","change_color","update_project_settings","remove_animation","edit_animation_properties","change_texture_path","load_undo_save","merge_project"];const a=["update_selection"];function c(){t.forEach((e=>{Blockbench.on(e,(()=>{if(Project&&Project.isSharing){console.log("[SharedProject] 发送数据...",e);let i=Codecs.project.compile({editor_state:!0,history:!1,uuids:!0,bitmaps:!0,raw:!0});i.source_uuid=Project.uuid,delete i.editor_state,n("sync-shared-data",i)}}))})),o("sync-shared-data",(e=>{Project&&Project.name===e.name&&e.source_uuid!==Project.uuid&&(console.log("[SharedProject] 收到来自其他窗口的完整数据更新...",e),function(e){var n,i;if(!Project)return;const o=Project.uuid,t=Project.name;if(Project.selected_elements.slice(),Project.selected_group,Blockbench.dispatchEvent("pre_refresh_project"),Mesh.all.forEach((e=>{e.remove()})),Mesh.all=[],Group.all.forEach((e=>{e.remove(!1)})),Group.all=[],Texture.all.forEach((e=>{e.remove(!1)})),Texture.all=[],Blockbench.Animation.all.forEach((e=>{e.remove(!1,!0)})),Blockbench.Animation.all=[],AnimationController.all.forEach((e=>{e.remove(!1)})),AnimationController.all=[],Codecs.project.parse(e,(null===(n=e.editor_state)||void 0===n?void 0:n.save_path)||"",!0),Project.uuid=o,Project.name=t,e.animations){const n=e.animations.find((e=>e.selected));n&&(null===(i=Blockbench.Animation.all.find((e=>e.name===n.name)))||void 0===i||i.select())}Canvas.updateAll(),Blockbench.dispatchEvent("post_refresh_project")}(e))})),a.forEach((e=>{Blockbench.on(e,(()=>{Project&&Project.isSharing&&(console.log("[SharedProject] 发送模型数据...",e),function(){if(!Project||!Project.isSharing)return;let e=Codecs.project.compile({editor_state:!1,history:!1,uuids:!0,bitmaps:!1,raw:!0});e.source_uuid=Project.uuid,delete e.editor_state,delete e.textures,n("sync-model-data",e)}())}))})),o("sync-model-data",(e=>{Project&&Project.name===e.name&&e.source_uuid!==Project.uuid&&(console.log("[SharedProject] 收到来自其他窗口的模型数据更新...",e),function(e){var n;if(!Project)return;const i=Project.uuid,o=Project.name;Blockbench.dispatchEvent("pre_refresh_project"),Mesh.all.forEach((e=>{e.remove()})),Mesh.all=[],Group.all.forEach((e=>{e.remove(!1)})),Group.all=[],Blockbench.Animation.all.forEach((e=>{e.remove(!1,!0)})),Blockbench.Animation.all=[],Codecs.project.parse(e,(null===(n=e.editor_state)||void 0===n?void 0:n.save_path)||"",!0),Project.uuid=i,Project.name=o,Canvas.updateAll(),Blockbench.dispatchEvent("post_refresh_project")}(e))})),Blockbench.on("display_animation_frame",(()=>{const e=Blockbench.Animation.selected;Project&&Project.isSharing&&e&&!Timeline.playing&&n("sync-animation-frame",{project_name:Project.name,animation_name:e.name,time:Timeline.time})})),["timeline_play","timeline_pause"].forEach((e=>{Blockbench.on(e,(()=>{const e=Blockbench.Animation.selected;Project&&Project.isSharing&&e&&n("sync-animation-timeline",{project_name:Project.name,animation_name:e.name,animations:Blockbench.Animation.all.map((e=>({name:e.name,playing:e.playing,time:e.time}))),playing:Timeline.playing,time:Timeline.time})}))})),o("sync-animation-frame",(e=>{Project&&Project.name===e.project_name&&Blockbench.Animation.selected&&Blockbench.Animation.selected.name===e.animation_name&&!Timeline.playing&&(Timeline.setTime(e.time),Timeline.pause())})),o("sync-animation-timeline",(e=>{Project&&Project.name===e.project_name&&(e.animations.forEach((n=>{const i=Blockbench.Animation.all.find((e=>e.name===n.name));e.animation_name===n.name&&(null==i||i.select()),i&&(i.playing=n.playing)})),e.playing?(Timeline.setTime(e.time),Timeline.start()):(Timeline.setTime(e.time),Timeline.pause()))}))}BBPlugin.register("multi-window",{title:tl("multi_window.name"),author:"EaseCation",icon:"window",description:tl("multi_window.description"),version:"1.0.0",variant:"desktop",onload(){Language.addTranslations("en",{"multi_window.name":"Multi Window","multi_window.description":"Multi Window with Sync","action.open_in_new_window":"Split to New Window","action.open_in_new_window.desc":"Open the current project in a new window"}),Language.addTranslations("zh",{"multi_window.name":"多窗口","multi_window.description":"在BlockBench实现多窗口同步","action.open_in_new_window":"分屏到新窗口","action.open_in_new_window.desc":"在新窗口中打开当前项目"}),Language.addTranslations("zh-Hans",{"multi_window.name":"多窗口","multi_window.description":"在BlockBench实现多窗口同步","action.open_in_new_window":"分屏到新窗口","action.open_in_new_window.desc":"在新窗口中打开当前项目"}),Language.addTranslations("zh-Hant",{"multi_window.name":"多窗口","multi_window.description":"在BlockBench實現多窗口同步","action.open_in_new_window":"分屏到新窗口","action.open_in_new_window.desc":"在新窗口中打開當前項目"}),Language.addTranslations("ja",{"multi_window.name":"マルチウィンドウ","multi_window.description":"BlockBenchでのマルチウィンドウ同期","action.open_in_new_window":"新しいウィンドウで分割","action.open_in_new_window.desc":"現在のプロジェクトを新しいウィンドウで開く"}),Language.addTranslations("ko",{"multi_window.name":"다중 창","multi_window.description":"BlockBench에서 다중 창 동기화","action.open_in_new_window":"새 창으로 분할","action.open_in_new_window.desc":"현재 프로젝트를 새 창에서 엽니다"}),Language.addTranslations("fr",{"multi_window.name":"Multi Fenêtre","multi_window.description":"Synchronisation Multi Fenêtre dans BlockBench","action.open_in_new_window":"Diviser dans une Nouvelle Fenêtre","action.open_in_new_window.desc":"Ouvrir le projet actuel dans une nouvelle fenêtre"}),Language.addTranslations("de",{"multi_window.name":"Mehrere Fenster","multi_window.description":"BlockBench mit mehreren Fenstern synchronisieren","action.open_in_new_window":"In Neues Fenster teilen","action.open_in_new_window.desc":"Das aktuelle Projekt in einem neuen Fenster öffnen"}),Language.addTranslations("es",{"multi_window.name":"Ventana Múltiple","multi_window.description":"Sincronización de Ventanas Múltiples en BlockBench","action.open_in_new_window":"Dividir en Nueva Ventana","action.open_in_new_window.desc":"Abrir el proyecto actual en una nueva ventana"}),Language.addTranslations("pt",{"multi_window.name":"Janela Múltipla","multi_window.description":"Sincronização de Várias Janelas no BlockBench","action.open_in_new_window":"Dividir em Nova Janela","action.open_in_new_window.desc":"Abrir o projeto atual em uma nova janela"}),MenuBar.addAction(e,"file.8"),c(),setTimeout((()=>{ipcRenderer.removeAllListeners("accept-detached-tab"),ipcRenderer.on("accept-detached-tab",((e,n)=>{if("__magic__"in n){const e=n.__magic__;console.log("[SharedProject] 收到数据...",e,n),e in i?(0,i[e])(n):console.warn("[SharedProject] 收到未知magic数据...",e,n)}else console.log("[SharedProject] 收到无magic数据...",n),Interface.page_wrapper.classList.toggle("accept_detached_tab",n)}))}),500)},onunload(){MenuBar.removeAction("file.open_in_new_window")}})})();